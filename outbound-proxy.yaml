Description: Outbound filtering proxy
Parameters:
  WhitelistedDomains:
    Type: String
    Default: '.amazonaws.com, .debian.org'
    Description: Whitelisted domains comma separated
  CustomDNS:
    Type: String
    Default: default
    Description: >-
      Provide optional a DNS server for domain filtering, like OpenDNS (comma
      separated, like 8.8.8.8,8.8.8.7)
  KeyName:
    Type: String
    Description: Name of RSA key for EC2 access for testing only.
    Default: ''
  PermissionsBoundary:
    Type: String
    Description: IAM Policy ARN for Permission Boundary
    Default: ''
  ProxyPort:
    Type: String
    Default: 3128
    Description: Port Proxy
  VpcId:
    Description: VPC ID Where the Proxy will be installed
    Type: 'AWS::EC2::VPC::Id'
  PrivateSubnetIDs:
    Description: >-
      Private SubnetIDs where the Network LoadBalancer will be placed (Select
      min 2 max 3)
    Type: 'List<AWS::EC2::Subnet::Id>'
  PublicSubnetIDs:
    Description: Public SubnetIDs where the proxy will be placed (Select min 2 max 3)
    Type: 'List<AWS::EC2::Subnet::Id>'
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - c3.large
      - c3.xlarge
      - c4.large
    ConstraintDescription: must be a valid EC2 instance type.
  NetworkAllowedCIDR:
    Description: >-
      CIDR allowed in Proxy Security Group. The allowed block size is between a
      /32 netmask and /8 netmask
    Type: String
    Default: 172.31.0.0/16
    AllowedPattern: '^[.0-9]*\/([89]|[12][0-9]|3[0-2])$'
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: AMI ID pointer in SSM. Default latest AMI Amazon Linux2.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Proxy parameter
        Parameters:
          - WhitelistedDomains
          - CustomDNS
          - ProxyPort
          - InstanceType
          - LatestAmiId
          - KeyName
      - Label:
          default: Network parameter
        Parameters:
          - VpcId
          - PrivateSubnetIDs
          - PublicSubnetIDs
          - NetworkAllowedCIDR
    ParameterLabels:
      WhitelistedDomains:
        default: Allowed domains (whitelisted)
      CustomDNS:
        default: Custom DNS servers
      ProxyPort:
        default: Proxy Port
      InstanceType:
        default: Instance Type
      LatestAmiId:
        default: AMI ID
      KeyName:
        default: SSH Key name
      VpcId:
        default: VPC ID
      PrivateSubnetIDs:
        default: Private Subnet IDs
      PermissionsBoundary:
        default: Permissions Boundary
      PublicSubnetIDs:
        default: Public Subnet IDs
      NetworkAllowedCIDR:
        default: Allowed client CIRD
  'AWS::CloudFormation::Designer':
    8bd245b2-cb2e-4d26-a58f-341069826c82:
      size:
        width: 150
        height: 150
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
    62057660-d310-4a2d-b3b1-b2bd5a1b9667:
      size:
        width: 60
        height: 60
      position:
        x: 270
        'y': 90
      z: 1
      embeds: []
    80bb9bc4-6626-4dc2-b74a-48b2257c624e:
      size:
        width: 60
        height: 60
      position:
        x: 270
        'y': 210
      z: 1
      embeds: []
    fdb3675b-7b6c-4322-b084-b36322cbc0cf:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 300
      z: 1
      embeds: []
    986e6843-53ea-43b0-922e-a99560ae9dea:
      size:
        width: 60
        height: 60
      position:
        x: 390
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - fdb3675b-7b6c-4322-b084-b36322cbc0cf
    4c810a29-c04b-491f-beb5-af8789eff9bf:
      size:
        width: 60
        height: 60
      position:
        x: 390
        'y': 210
      z: 1
      embeds: []
    7080e2c5-8495-4e37-9b51-f411e8a5b751:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 330
      z: 1
      embeds: []
    e5ee2ced-6afe-4a17-8141-cee67ebbe707:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 330
      z: 1
      embeds: []
    2a516507-4e32-404e-bf41-198ed75d4be7:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 330
      z: 1
      embeds: []
    d12811da-8d3a-4859-87e8-d7cbe2bd0db2:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 420
      z: 1
      embeds: []
    28064c01-7ee1-4ee0-9cab-a4ce6691aa0b:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 450
      z: 1
      embeds: []
    d3ee6e23-de40-46a3-be1d-6bdd6002c1e0:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 450
      z: 1
      embeds: []
      isassociatedwith:
        - 28064c01-7ee1-4ee0-9cab-a4ce6691aa0b
    9decbfb3-f465-4b89-b4d7-44459f5011d8:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 450
      z: 1
      embeds: []
      isassociatedwith:
        - 62057660-d310-4a2d-b3b1-b2bd5a1b9667
    9eef0cba-5db9-4979-8526-6623d580a5c4:
      size:
        width: 60
        height: 60
      position:
        x: 510
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - 9decbfb3-f465-4b89-b4d7-44459f5011d8
        - 80bb9bc4-6626-4dc2-b74a-48b2257c624e
    ab2f758a-1320-4bba-82d3-77c11f00b446:
      size:
        width: 60
        height: 60
      position:
        x: 510
        'y': 210
      z: 1
      embeds: []
      isassociatedwith:
        - 9eef0cba-5db9-4979-8526-6623d580a5c4
    b9cad46a-f691-4d06-a1f3-8cafa053bed4:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 330
      z: 1
      embeds: []
    b2cdd508-84a1-4726-bb53-38ff02acc146:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 450
      z: 1
      embeds: []
      isassociatedwith:
        - 9eef0cba-5db9-4979-8526-6623d580a5c4
    8585b759-491a-4848-bf66-f73994186609:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 540
      z: 1
      embeds: []
Conditions:
  AddSSHKey: !Not
    - !Equals
      - ''
      - Ref: KeyName
Resources:
  OutboundProxyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'Outbound-proxy-${AWS::StackName}'
      PermissionsBoundary: !Ref PermissionsBoundary
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !GetAtt OutboundProxyLogGroup.Arn
        - PolicyName: AssociateEIP
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AssociateAddress'
                  - 'ec2:Describe*'
                Resource:
                  - '*'
        - PolicyName: RevokeAuthorizeSG
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:RevokeSecurityGroupIngress'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:Describe*'
                Resource:
                  - '*'
        - PolicyName: GetSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref WhitelistedSitesSecret
        - PolicyName: CloudWatchMetric
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource:
                  - '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 28064c01-7ee1-4ee0-9cab-a4ce6691aa0b
  WhitelistedSitesSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: Proxy-Domains-Whitelisting
      Description: This secret contains the proxy whitelisted domains
      SecretString: !Ref WhitelistedDomains
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d12811da-8d3a-4859-87e8-d7cbe2bd0db2
  FixedEIPa:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2a516507-4e32-404e-bf41-198ed75d4be7
  FixedEIPb:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e5ee2ced-6afe-4a17-8141-cee67ebbe707
  FixedEIPc:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7080e2c5-8495-4e37-9b51-f411e8a5b751
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Type: network
      Name: OutboundProxyLoadBalancer
      Subnets: !Ref PrivateSubnetIDs
    Metadata:
      'AWS::CloudFormation::Designer':
        id: fdb3675b-7b6c-4322-b084-b36322cbc0cf
  NetworkLoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: OutboundProxyTargetGroup
      Port: !Ref ProxyPort
      Protocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Tags:
        - Key: Name
          Value: SMARTProxyTargetGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 80bb9bc4-6626-4dc2-b74a-48b2257c624e
  LoadBalancerListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ProxyPort
      Protocol: TCP
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 986e6843-53ea-43b0-922e-a99560ae9dea
  OutboundProxyProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      InstanceProfileName: !Sub 'Proxy-EC2-${AWS::StackName}'
      Roles:
        - !Ref OutboundProxyRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d3ee6e23-de40-46a3-be1d-6bdd6002c1e0
  OutboundProxySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to Outbound Proxy
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: !Ref NetworkAllowedCIDR
          FromPort: !Ref ProxyPort
          ToPort: !Ref ProxyPort
          IpProtocol: tcp
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 62057660-d310-4a2d-b3b1-b2bd5a1b9667
  OutboundProxyASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnetIDs
      Cooldown: 120
      LaunchConfigurationName: !Ref OutboundProxyLaunchConfig
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs:
        - Ref: NetworkLoadBalancerTargetGroup
      TerminationPolicies:
        - OldestInstance
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: outbound-proxy
        - Key: AppVersion
          PropagateAtLaunch: 'true'
          Value: 1.0.0
        - Key: ApplicationID
          PropagateAtLaunch: 'true'
          Value: outbound-proxy
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
        SuspendProcesses:
          - ScheduledActions
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9eef0cba-5db9-4979-8526-6623d580a5c4
  ScaleOutPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: OutboundProxyASG
      Cooldown: '90'
      ScalingAdjustment: '1'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b2cdd508-84a1-4726-bb53-38ff02acc146
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '80'
      AlarmDescription: >-
        Alarm if CPU too high (50%) or metric disappears indicating instance is
        down
      Period: '60'
      AlarmActions:
        - Ref: ScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: OutboundProxyASG
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8585b759-491a-4848-bf66-f73994186609
  ScaleInPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: OutboundProxyASG
      Cooldown: '90'
      ScalingAdjustment: '-1'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ab2f758a-1320-4bba-82d3-77c11f00b446
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if CPU low (10%) or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
        - Ref: ScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: OutboundProxyASG
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b9cad46a-f691-4d06-a1f3-8cafa053bed4
  OutboundProxyLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Configures Outbound Proxy
      'AWS::CloudFormation::Init':
        config:
          files:
            /root/update-dns.sh:
              content: !Sub >
                # DNS List comma delimited

                dns_list="${CustomDNS}"

                #

                # check if default

                if [[ $dns_list == "default" ]]; then
                  exit
                fi

                #

                # split to list

                array=(${!dns_list//,/ })

                int_list=`ls /etc/sysconfig/network-scripts/ifcfg-* | grep -v
                "\-lo$\|old$"`


                # for all interfaces except lookback

                for int in ${!int_list[@]}

                do
                      # remove spaces
                      $int=${!int//[[:blank:]]/}
                      echo "working on $int"
                      # make tmp file without DNS settings
                      grep -ve "PEERDNS=\|DNS.=" $int > ./tmp.int.conf
                      grep -v "nameserver" /etc/resolv.conf  > ./tmp.resolv.conf
                      echo "PEERDNS=yes" >> ./tmp.int.conf
                      counter=1
                      for i in ${!array[@]}
                      do
                          echo "DNS${!counter}=${!i}" >> ./tmp.int.conf
                          echo "nameserver ${!i}" >> ./tmp.resolv.conf
                          ((counter++))
                      done
                      # update the interface config
                      mv $int ${!int}.old
                      cp ./tmp.int.conf $int
                done

                # update the resolv.conf

                mv /etc/resolv.conf  /etc/resolv.conf.old

                cp ./tmp.resolv.conf /etc/resolv.conf

                # clear squid cache if squid is running. Relevant for dns
                content filtering

                # systemctl status squid && systemctl stop squid && rm -rf
                /var/spool/squid/ && squid -z && systemctl start squid

                echo "done"
              mode: '000755'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000755'
              owner: root
              group: root
            /root/fetch-config-cron.sh:
              content: !Sub >
                aws secretsmanager get-secret-value  --secret-id
                ${WhitelistedSitesSecret} --region ${AWS::Region} > ~/.tmp.hosts

                upstreamVersion=$(grep VersionId ~/.tmp.hosts)

                hostVersion=$(cat ~/configVersion) || hostVersion="0"

                # update if config

                if [[ $upstreamVersion != $hostVersion ]]; then
                   mv /etc/squid/squid.allowed.sites.txt /etc/squid/squid.allowed.sites.txt.old
                   grep SecretString ~/.tmp.hosts | sed  's/^.*SecretString\": \"\(.*\)\"\,/\1/' | tr -d " " | tr "," "\n" > /etc/squid/squid.allowed.sites.txt
                   grep VersionId ~/.tmp.hosts > ~/configVersion
                   systemctl restart squid
                   echo "Squid config updated"
                   logger "Squid config updated by cron-job from AWS secret store ${WhitelistedSitesSecret}"
                fi
              mode: '000755'
              owner: root
              group: root
            /root/get-stats-cron.sh:
              content: !Sub >
                #!/bin/bash

                #

                # Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights
                Reserved.

                # SPDX-License-Identifier: MIT-0#

                #

                # gets statistics from squid proxy and pushes them to CloudWatch

                #

                ###

                region=`curl --silent
                http://169.254.169.254/latest/dynamic/instance-identity/document
                | grep region | cut -f 4 -d '"'`

                instanceId=`curl --silent  curl
                http://169.254.169.254/latest/meta-data/instance-id`


                squidclient -h localhost cache_object://localhost/ mgr:5min |
                grep
                "client_http.request\|client_http.hits\|client_http.errors\|client_http.kbytes_in\|client_http.kbytes_out\|server.all."
                | while read line ; do
                    name=`echo $line | cut -d "=" -f 1`
                    value=`echo $line | cut -d "=" -f 2 | sed "s/[^0-9\.]*//g" `
                    aws cloudwatch put-metric-data --metric-name "$name" --namespace Proxy --dimensions InstanceID="$instanceId" --value "$value"  --region $region
                done
              mode: '000755'
              owner: root
              group: root
            /etc/squid/squid.allowed.sites.txt:
              content: |
                .amazon.com
              mode: '000400'
              owner: root
              group: root
            /etc/squid/squid.conf:
              content: !Sub "# Recommended minimum configuration:\n#\n\n# Example rule allowing access from your local networks.\n# Adapt to list your (internal) IP networks from where browsing\n# should be allowed\nacl localnet src 10.0.0.0/8\t# RFC1918 possible internal network\nacl localnet src 172.16.0.0/12\t# RFC1918 possible internal network\nacl localnet src 192.168.0.0/16\t# RFC1918 possible internal network\nacl localnet src fc00::/7       # RFC 4193 local private network range\nacl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines\nacl localnet src 127.0.0.1\n\n\nacl SSL_ports port 443\nacl Safe_ports port 80\t\t# http\nacl Safe_ports port 21\t\t# ftp\nacl Safe_ports port 443\t\t# https\nacl Safe_ports port 70\t\t# gopher\nacl Safe_ports port 210\t\t# wais\nacl Safe_ports port 1025-65535\t# unregistered ports\nacl Safe_ports port 280\t\t# http-mgmt\nacl Safe_ports port 488\t\t# gss-http\nacl Safe_ports port 591\t\t# filemaker\nacl Safe_ports port 777\t\t# multiling http\nacl CONNECT method CONNECT\n\n#\n# Recommended minimum Access Permission configuration:\n#\n# Deny requests to certain unsafe ports\nhttp_access deny !Safe_ports\n\n# Deny CONNECT to other than secure SSL ports\nhttp_access deny CONNECT !SSL_ports\n\n# Only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# We strongly recommend the following be uncommented to protect innocent\n# web applications running on the proxy server who think the only\n# one who can access services on \"localhost\" is a local user\n#http_access deny to_localhost\n\n#\n# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS\n#\n\n# Example rule allowing access from your local networks.\n# Adapt localnet in the ACL section to list your (internal) IP networks\n# from where browsing should be allowed\nacl allowed_http_sites dstdomain \"/etc/squid/squid.allowed.sites.txt\"\nhttp_access allow allowed_http_sites\n#http_access allow localnet\n#http_access allow localhost\n\n# And finally deny all other access to this proxy\nhttp_access deny all\n\n# Squid normally listens to port 3128\nhttp_port 3128 ssl-bump cert=/etc/squid/cert.pem\nacl allowed_https_sites ssl::server_name \"/etc/squid/squid.allowed.sites.txt\"\nacl step1 at_step SslBump1\nacl step2 at_step SslBump2\nacl step3 at_step SslBump3\nssl_bump peek step1 all\nssl_bump peek step2 allowed_https_sites\nssl_bump splice step3 allowed_https_sites\nssl_bump terminate step2 all\n\n# Uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /var/spool/squid 100 16 256\n\n# Leave coredumps in the first cache dir\ncoredump_dir /var/spool/squid\n#\n# Add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern ^ftp:\t\t1440\t20%\t10080\nrefresh_pattern ^gopher:\t1440\t0%\t1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0\t0%\t0\nrefresh_pattern .\t\t0\t20%\t4320\n"
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/squid/access.log]
                file = /var/log/squid/access.log
                log_group_name = ${OutboundProxyLogGroup}
                log_stream_name = {instance_id}/squid_access.log
                #datetime_format = %d/%b/%Y:%H:%M:%S
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
                interval=5
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.OutboundProxyLaunchConfig.Metadata.AWS::CloudFormation::Init

                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName}
                --resource OutboundProxyLaunchConfig --region ${AWS::Region}

                runas=root
              mode: '000400'
              owner: root
              group: root
      'AWS::CloudFormation::Designer':
        id: 9decbfb3-f465-4b89-b4d7-44459f5011d8
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !If
        - AddSSHKey
        - !Ref KeyName
        - !Ref 'AWS::NoValue'
      SecurityGroups:
        - !Ref OutboundProxySecurityGroup
      IamInstanceProfile:
        Ref: OutboundProxyProfile
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -xe

          yum -y install python-pip

          yum -y install python-setuptools

          yum install -y awscli

          # install squid

          yum install -y squid

          # install the CloudWatch Logs agent

          yum install -y awslogs

          # Get the latest CloudFormation package

          easy_install
          https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          # Start cfn-init

          /opt/aws/bin/cfn-init -s ${AWS::StackId} -r OutboundProxyLaunchConfig
          --region ${AWS::Region} || error_exit 'Failed to run cfn-init'

          # Start up the cfn-hup daemon to listen for changes to the launch
          configuration metadata

          /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'

          # start the cloud watch agent

          systemctl start awslogsd

          # get the IP allocation id

          EIPs=(${FixedEIPa.AllocationId} ${FixedEIPb.AllocationId}
          ${FixedEIPc.AllocationId})

          for i in ${!EIPs[@]}; do
             out=$(aws ec2  describe-addresses --region ${AWS::Region} --allocation-ids $i)
             if [[ $out != *AssociationId* ]]; then
                   freeEIP=$i
                   break
             fi
          done

          # bind the address

          echo "binding EIP"

          aws ec2 associate-address --region ${AWS::Region} --instance-id $(curl
          -s http://169.254.169.254/latest/meta-data/instance-id)
          --allocation-id $freeEIP --allow-reassociation || error_exit 'Failed
          to Associate Elastic IP'

          # generate dummy certificate

          openssl req -x509 -newkey rsa:4096 -keyout /etc/squid/cert.pem -out
          /etc/squid/cert.pem -days 3650 -subj
          "/C=XX/ST=XX/L=squid/O=squid/CN=squid" -nodes

          #  get the whitelisted domain

          /root/fetch-config-cron.sh

          #  start squit

          systemctl start squid

          # cron to update whitelist if needed every 5 min

          echo "*/5 * * * * /root/fetch-config-cron.sh" | crontab -

          # cron to to get and push proxy stats

          (crontab -l ; echo "*/5 * * * * /root/get-stats-cron.sh") | crontab -

          # set up DNS if needed

          if [[ ${CustomDNS} != "default" ]]; then
              /root/update-dns.sh
          fi

          # All done so signal success

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource
          OutboundProxyASG --region ${AWS::Region}

          echo "User data done"
  OutboundProxyLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub 'Proxy-${AWS::StackName}'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8bd245b2-cb2e-4d26-a58f-341069826c82
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group for outbound proxy
    Value: !Ref OutboundProxyLogGroup
    Export:
      Name: Proxy-CloudWatchLogGroupName
  OutboundProxyDomain:
    Description: Proxy DNS name to be used in the clients
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: Proxy-Domain
  OutboundProxyPort:
    Description: Port of the Proxy
    Value: !Ref ProxyPort
    Export:
      Name: Proxy-Port
  EgressIP1:
    Description: Outbound Proxy source IP (first)
    Value: !Ref FixedEIPa
    Export:
      Name: Proxy-Egress-IP-1
  EgressIP2:
    Description: Outbound Proxy source IP (second)
    Value: !Ref FixedEIPb
    Export:
      Name: Proxy-Egress-IP-2
  EgressIP3:
    Description: Outbound Proxy source IP (third)
    Value: !Ref FixedEIPc
    Export:
      Name: Proxy-Egress-IP-3
  SecurityGroupProxy:
    Description: Proxy security group
    Value: SecurityGroup_Proxy
    Export:
      Name: Proxy-SecurityGroup
  LinuxProxySettings:
    Description: Linux proxy settings. Copy and paste to your shell to set the proxy
    Value: !Sub >-
      export http_proxy=http://${LoadBalancer.DNSName}:${ProxyPort} && export
      https_proxy=$http_proxy
    Export:
      Name: LinuxProxySettings
